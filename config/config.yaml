main:
  download_repository: "https://github.com/Dyrutter/anime_recommendations#download"  
  project_name: anime_recommendations
  experiment_name: development
  execute_steps:
    - download
    - preprocess
    - neural_network
    - similar_anime
    - similar_users
    - user_prefs
    - user_recs
    - model_recs
    # - API
  random_seed: 42
  interval: 3000 # Time in milliseconds to display any figures on local machine
  raise_flow_error: True # Bool, set to True if you desire to raise an error if artifact user ID's are not consistent between steps 

data: # Data artifacts
  stats_url: "https://github.com/Dyrutter/anime_recommendations/blob/main/data/user_stats.parquet?raw=True"
  synopses_url: "https://github.com/Dyrutter/anime_recommendations/blob/main/data/synopses.csv?raw=True"
  all_anime_url: "https://github.com/Dyrutter/anime_recommendations/blob/main/data/all_anime.csv?raw=True"

  stats_artifact: "full_data_set.parquet" # Raw version of main data frame
  stats_artifact_type: "raw_data" # Type of raw version of main data frame
  stats_artifact_description: "Main raw statistics file." # Description of raw version of main data frame
  stats_artifact_latest: "full_data_set.parquet:v0" # Used artifact version of main data frame

  synopses_artifact: "synopses.csv"
  synopses_artifact_type: "raw_data"
  synopses_artifact_description: "File containing synopses"
  sypnopses_artifact_latest: "synopses.csv:latest"

  all_anime_artifact: "all_anime.csv"
  all_anime_type: "raw_data"
  all_anime_description: "File containing descriptive stats for all anime"
  all_anime_artifact_latest: "all_anime.csv:latest"

  preprocessed_stats: "preprocessed_stats.parquet"
  preprocessed_artifact_type: "preprocessed_data"
  preprocessed_artifact_description: "Preprocessed stats file to be used for model training"
  preprocessed_artifact_latest: "preprocessed_stats.parquet:v2" # Currently with <400 reviews removed

  num_reviews: 400 # Minimum number of reviews a user must have made in order to be considered
  drop_half_watched: False # Drop instances where a user has watched less than half the episodes
  drop_unwatched: False # Drop instnaces where a user hasn't watched any episodes
  drop_plan: False # Drop instances where a user only plans to watch the anime

  save_raw_locally: False # Whether to save raw data locally
  save_clean_locally: False # Whether to save clean data locally
  from_local: True # Use local raw data for download step
  local_fname: '/Applications/python_files/anime_recommendations/data/animelist.csv' # Filename of local raw data

model: # Settings for neural network
  test_size: 10000 # Size of test set to hold out
  kernel_initializer: 'he_normal' # Weights matrix init, 'he_normal' draws from a truncated normal dist centered on 0 with stddev = sqrt(2 / num_weight_tensor_input_units)
  min_lr: 0.00001 # Minimum learning rate in learning rate scheduler
  max_lr: 0.00005 # Maximum learning rate in learning rate scheduler
  batch_size: 10000 # Size of data batches to run through neural network in model.fit()
  rampup_epochs: 5 # Number of beginning epochs to get a warm start
  sustain_epochs: 0 # If epoch is less than rampup epochs + sustain epochs, use the max lr
  exp_decay: 0.8 # Exponential decay rate in learning rate schedule
  embedding_size: 128 # Number of feature embeddings to use in anime_id and user_id embedding layers
  l2_reg_factor: 0.0001 # L2 regularization factor
  model_loss: 'binary_crossentropy' # Name of loss function in model.compile()
  optimizer: 'Adam' # Neural network optimizer in model.compile()
  weights_artifact: 'wandb_main_weights.h5' # Artifact name to save weights as
  epochs: 20 # Maximum number of epochs to run in model.fit(), will run fewer if optimal checkpoint metric is discovered sooner
  activation_function: 'sigmoid' # Neural network activation function in model.compile()
  checkpoint_metric: 'val_loss' # Metric to monitor at checkpoints in EarlyStopping() and ModelCheckpoint()
  save_weights_only: True # Whether to save only weights at each checkpoint in ModelCheckpoint()
  save_best_weights: True # Whether to keep only the best weights on file as opposed to the weights created at every epoch in ModelCheckpoint()
  save_freq: 'epoch' # Checkpoint steps at which to save model during training in ModelCheckpoint() (i.e. 'epoch' to save the model at every epoch)
  save_model: True # Whether to save final trained model to local machine
  model_name: './wandb_anime_nn.h5' # Path to use if you want to save model to your local machine
  verbose: 1 # Whether to print progress stats in local terminal (1=True, 0=False)
  model_artifact: 'wandb_anime_nn.h5' # Artifact name for the model
  history_csv: 'wandb_anime_nn_history.csv' # Artifact name for history csv
  monitor: 'val_loss' # Checkpoint metric to monitor in ModelCheckpoint() and EarlyStopping() to decide when to stop running epochs (early stopping)
  mode: 'min' # Overwrite checkpoint save file based on the maximization or the minimization of the config 'monitor' metric (e.g. for val_loss use 'min')
  anime_weights: 'wandb_anime_weights.csv' # Numpy array of anime weights
  user_weights: 'wandb_user_weights.csv' # Numpy array of user weights
  an_weights_fn: './wandb_anime_weights.csv' # Local file name to save anime weights as
  id_weights_fn: './wandb_user_weights.csv' # Local file name to save user ID weights as
  ID_emb_name: 'user_embedding' # Name of user weights layer
  anime_emb_name: 'anime_embedding' # Name of anime weights layer
  merged_name: 'dot_product' # Name of merged layer (dot product of embedding layers)
  model_metrics: ["mse"] # Metrics to grade in Model.compile()

nn_arts: # Names of main/best neural network artifacts
  main_anime_weights: "wandb_anime_weights.csv:v2" # Anime weights from main neural network model
  main_user_weights: "wandb_user_weights.csv:v2" # User weights from main neural network model
  main_weights_art: "wandb_main_weights.h5:v4" # All weights from main neural network model
  main_history: "wandb_anime_nn_history.csv:v12" # Hisotry file for main neural network
  main_model: "wandb_anime_nn.h5:v12" # Main neural network artifact name
  model_type: "h5" # Neural network model artifact type
  history_type: "history_csv" # Neural network history artifact type
  weights_type: "h5" # Neural network weights artifact type

similarity: # Arguments for anime-based recommendations in similar_anime.py
  anime_query: "YuuYuu☆Hakusho!" #"SilentMöbius" # Input anime to query. Change random_anime to False in order to use.
  random_anime: False # Whether to choose a random anime to assess rather than the anime input under anime_query
  a_query_number: 10 # Number of similar anime to return
  id_query_number: 10 # Number of similar IDs to return in similar_users.py, MUST BE SAME AS ['users']['recs_n_sim_ID'] IF MLflow IS USED
  max_ratings: 600 # Limit to this many ratings if random_user is True
  sim_random_user: False # Whether or not to use a random user as the sample
  anime_rec_genres: [None, "SLiceOF life", "va#mpire"] # Genres to include in recommendations, must include 3 total
  an_spec_genres: True # Whether or not to limit returned recommendations to specific genres
  types: ["TV", "Movie"] # Potentially ['TV', 'OVA', 'Movie', 'Special', 'ONA', 'Music'] in similar_anime.py
  spec_types: True # Whether or not to specify types
  a_rec_type: 'csv' #Type of anime recommendations artifacts to local machine
  save_sim_anime: True # Whether to save anime recommendation artifacts to local machine

users: # Arguments for user-based recommendations in user_prefs.py, similar_users.py, and user_recs.py
  favorite_percentile: 80 # Percentile of ratings to consider as favorites (i.e. 80 means the top 20% ratings are favorites)
  cloud_width: 600 # Pixel width of word cloud figures to display. Higher widths increase processing time
  cloud_height: 350 # Pixel height of word cloud figures to display. Higher heights increase processing time
  show_clouds: True # Whether to show clouds when running MLflow
  genre_fn: 'favorite_genres.png' # Artifact filename of genre cloud
  source_fn: 'favorite_source_material.png' # Artifact filename of sources cloud
  prefs_csv: 'user_prefs.csv' # Artifact filename of user_preferences
  save_faves: True # Whether to save clouds and CSV file from user_prefs.py to local machine
  latest_user_prefs: 'user_prefs.csv:latest' # Csv file of latest user preferences
  sim_user_type: 'csv' # Type of wandb artifact the list of similar users csv file was saved as
  sim_user_query: 153695 # A User ID to query if use_local_user is True in similar_users.py
  prefs_local_user: False # boolean of whether to use prefs_user_query as opposed to the ID artifact created in similar_users.py
  prefs_user_query: 109160 # Query to user in user_prefs.py if prefs_from_flow is False
  prefs_from_flow: True # Whether to take the user ID created in mlflow as opposed to a random user or a user specified in config for user_prefs.py
  user_recs_fn: "user_recs.csv" # Artifact name of user recommendations in user_recs.py
  save_user_recs: True # Boolean of whether to save users recommendations in user_recs.py
  user_num_recs: 10 # Number of anime recommendations to return in user_recs.py
  num_faves: 2 # Number of a similar user's favorite anime to return in similar_users.py
  TV_only: True # Whether to include only TV shows in user_recs.py
  sim_users_fn: 'similar_users.csv' # Filename of similar users artifact in similar_users.py
  sim_users_type: 'csv' # Artifact type of similar users df
  sim_users_art: 'similar_users.csv:latest' # Artifact for similar users to iput in other steps
  ID_fn: "ID_used.csv" # from similar_users.py, the ID used for MLflow
  flow_user: "ID_used.csv:latest" # latest artifact taken from similar_users.py, ID used for MLflow in user_prefs.py, user_recs.py, and model_recs.py, v0 is 153695
  ID_type: "csv" # Type of artifact the user ID was saved as in similar_users.py
  cloud_type: "png" # Type of genre and source cloud artifacts for user_prefs.py
  fave_art_type: "csv" # Type of data frame containing favorite genres and sources for user_prefs.py
  user_recs_query: 109160 # User to query in user_recs.py if recs_ID_from_conf is True
  user_recs_type: 'csv' # Artifact type of user-based recommendations csv file in user_recs.py
  recs_n_sim_ID: 10 # Number of similar users to include in user_recs.py, MUST BE SAME AS ['similarity']['ID_query_number'] IF MLFLOW IS USED
  recs_ID_from_conf: True # Whether to use the user ID specified in config file under user_recs_query
  save_sim_locally: True # Whether to save data frame of similar users to local machine in similar_users.py
  ID_rec_genres: ["Action", "None", None] # Genres to include in recommendations in user_recs.py, must include 3 total
  ID_spec_genres: False #Bool, whether to limit returned recommendations to anime of specified genres
  prefs_input_fn: 'user_prefs.csv:latest' # version of Name of csv file artifact created in user_prefs.py to use as input in user_recs.py
  prefs_input_type: 'csv' # Type of version of csv file artifact created in user_prefs.py for use in user_recs.py
  ID_recs_from_flow: True  # Bool, whether to use mlflow artifacts for user_recs.py
  ID_recs_faves_fn: "user_recs_preferences.csv" # artifact name to save user preferences as in user_recs.py
  ID_recs_faves_type: "csv" # Type of artifact to save user preferences as in user_recs.py

model_recs: # For recommendations based on the ranking model
  model_recs_fn: 'model_recs.csv' # Artifact filename for ranking-based anime recommendations
  save_model_recs: True # Whether to save ranking-based anime recs to local machine
  model_num_recs: 10 # Number of ranking-based anime recs to return
  specify_types: True # Whether to specify the types of anime to return in ranking-based recs
  anime_types: ["TV", "Movie"] # Types of anime to return in ranking-based recs, potentially ['TV', 'OVA', 'Movie', 'Special', 'ONA', 'Music']
  model_genres: ['Action', 'Comedy', None] # Genres to include in ranking-based recs, must include three total
  specify_genres: False # Whether to specify genres in ranking-based recs
  min_score: 0.00 # Minimum rating of anime recs to return
  max_score: 10.00 # Maximum rating of anime recs to return
  model_user_query: 109160 # User query for model recs if a local user is queried
  model_recs_type: 'csv' # Artifact type of model recs
  model_ID_flow: True # Whether to use the same user that was used in MLflow
  model_random_user: False # Whether to use a random user
  model_ID_conf: False # Whether to use the ID specified under model_user_query
